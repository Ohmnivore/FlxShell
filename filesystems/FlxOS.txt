{"name":"root","path":"","read":true,"execute":true,"write":true,"children":[{"name":"bin","path":"/bin","read":true,"execute":true,"write":true,"children":[{"name":"mv","path":"/bin/mv","read":true,"execute":true,"write":true,"content":"import hxclap.arg.CmdTargStrList;\r\nimport hxclap.arg.CmdArgStrList;\r\nimport hxclap.E_CmdArgSyntax;\r\nimport flxsys.FlxCmdLine;\r\n\r\ns = new CmdTargStrList(\r\n        \"source\",\r\n        \"Path (relative or absolute)\",\r\n        \"Files/Directories to be moved\",\r\n        (E_CmdArgSyntax.isREQ | E_CmdArgSyntax.isVALREQ)\r\n        );\r\n\r\nd = new CmdArgStrList(\r\n        \"d\",\r\n        \"destination\",\r\n        \"Path (relative or absolute)\",\r\n        \"New parent directories' paths\",\r\n        (E_CmdArgSyntax.isREQ | E_CmdArgSyntax.isVALREQ)\r\n        );\r\nd.delimiters = \",\";\r\n\r\ncmdline = new FlxCmdLine(\"mv\", [s, d]);\r\n\r\nstatus = cmdline.getParseReturn(Args);\r\nif (status != FlxCmdLine.OK)\r\n{\r\n    return [status, \"\", \"\"];\r\n}\r\n\r\ni = 0;\r\nwhile (i < s.list.length)\r\n{\r\n    f = Shell.drive.readItem(s.list[i], Shell.curDir.path);\r\n    parent = Shell.drive.readFolder(d.list[i], Shell.curDir.path);\r\n    f.parent.children.remove(f.name);\r\n    parent.addChild(f);\r\n    i++;\r\n}\r\n\r\nreturn [null, \"\", \"\"];"},{"name":"cat","path":"/bin/cat","read":true,"execute":true,"write":true,"content":"import hxclap.arg.CmdTargStr;\r\nimport hxclap.E_CmdArgSyntax;\r\nimport flxsys.FlxCmdLine;\r\nimport flxsys.Folder;\r\nimport StringTools;\r\n\r\nignoreRequired = false;\r\nif (fileInput != null || input != null)\r\n{\r\n    ignoreRequired = true;\r\n}\r\n\r\ns = new CmdTargStr(\r\n        \"source\",\r\n        \"File path (relative or absolute)\",\r\n        \"Source file to read\",\r\n        (E_CmdArgSyntax.isREQ | E_CmdArgSyntax.isVALREQ),\r\n        \"\"\r\n        );\r\n\r\ncmdline = new FlxCmdLine(\"cat\", [s], ignoreRequired);\r\n\r\nstatus = cmdline.getParseReturn(Args);\r\nif (status != FlxCmdLine.OK)\r\n{\r\n    return [status, \"\", \"\"];\r\n}\r\n\r\nif (input != null)\r\n{\r\n    ret = input;\r\n}\r\n\r\nif (fileInput != null)\r\n{\r\n    ret = [fileInput.content, \"\", \"\"];\r\n}\r\n\r\nif (fileInput == null && input == null)\r\n{\r\n    f = Shell.curDir;\r\n    if (StringTools.trim(s.value).length < 1)\r\n    {\r\n        f = Shell.curDir;\r\n    }\r\n    else\r\n    {\r\n        f = Shell.drive.readFile(s.value, Shell.curDir.path);\r\n    }\r\n    \r\n    ret = [f.content, \"\", \"\"];\r\n}\r\n\r\nreturn ret;"},{"name":"cd","path":"/bin/cd","read":true,"execute":true,"write":true,"content":"import StringTools;\r\n\r\nusage = [\"cd usage: cd <directory path, relative or absolute (starting with '/')>\", \"\", \"\"];\r\n\r\nif (Args[0] == \"-h\" || Args[0] == \"-help\")\r\n{\r\n    return usage;\r\n}\r\n\r\nif (input != null)\r\n{\r\n    ret = StringTools.trim(input[0]);\r\n}\r\n\r\nif (fileInput != null)\r\n{\r\n    ret = StringTools.trim(fileInput.content);\r\n}\r\n\r\nif (fileInput == null && input == null)\r\n{\r\n    if (Args.length == 0)\r\n        return usage;\r\n    ret = Args[0];\r\n}\r\n\r\nShell.curDir = Shell.drive.readFolder(ret, Shell.curDir.path);\r\nreturn [null, \"\", \"\"];"},{"name":"ls","path":"/bin/ls","read":true,"execute":true,"write":true,"content":"import hxclap.arg.CmdTargStr;\r\nimport hxclap.E_CmdArgSyntax;\r\nimport flxsys.FlxCmdLine;\r\nimport flxsys.Folder;\r\nimport StringTools;\r\nimport Std;\r\nimport flxsys.Folder;\r\n\r\nignoreRequired = false;\r\nif (fileInput != null || input != null)\r\n{\r\n    ignoreRequired = true;\r\n}\r\n\r\nd = new CmdTargStr(\r\n        \"directory\",\r\n        \"Directory path (relative or absolute)\",\r\n        \"Destination\",\r\n        (E_CmdArgSyntax.isOPT | E_CmdArgSyntax.isVALOPT),\r\n        Shell.curDir.path\r\n        );\r\n\r\ncmdline = new FlxCmdLine(\"ls\", [d], ignoreRequired);\r\n\r\nstatus = cmdline.getParseReturn(Args);\r\nif (status != FlxCmdLine.OK)\r\n{\r\n    return [status, \"\", \"\"];\r\n}\r\n\r\nif (input != null)\r\n{\r\n    if (Std.is(input[0], Folder))\r\n    {\r\n        dir = input[0];\r\n    }\r\n    else\r\n    {\r\n        dir = Shell.drive.readFolder(input[0], Shell.curDir.path);\r\n    }\r\n}\r\n\r\nif (fileInput != null)\r\n{\r\n    dir = Shell.drive.readFolder(StringTools.trim(fileInput.content), Shell.curDir.path);\r\n}\r\n\r\nif (fileInput == null && input == null)\r\n{\r\n    dir = Shell.curDir;\r\n    if (StringTools.trim(d.value).length < 1)\r\n    {\r\n        dir = Shell.curDir;\r\n    }\r\n    else\r\n    {\r\n        dir = Shell.drive.readFolder(d.value, Shell.curDir.path);\r\n    }\r\n}\r\n\r\nret = [];\r\nfor (c in dir.children)\r\n{\r\n\tif (c.isDirectory)\r\n\t\tret.push(c);\r\n}\r\nfor (c in dir.children)\r\n{\r\n\tif (!c.isDirectory)\r\n\t\tret.push(c);\r\n}\r\n\r\nreturn [ret, \"name\", \"isDirectory\"];"},{"name":"netstat","path":"/bin/netstat","read":true,"execute":true,"write":true,"content":"usage = [\"netstat usage: netstat\", \"\", \"\"];\r\n\r\nif (Args.length < 1)\r\n{\r\n    return usage;\r\n}\r\n\r\nif (Args[0] == \"-h\" || Args[0] == \"-help\")\r\n{\r\n    return usage;\r\n}\r\n\r\nreturn [Bus.listDevices(), \"\", \"\"];"},{"name":"touch","path":"/bin/touch","read":true,"execute":true,"write":true,"content":"import hxclap.arg.CmdTargStrList;\r\nimport hxclap.arg.CmdArgStr;\r\nimport hxclap.E_CmdArgSyntax;\r\nimport flxsys.FlxCmdLine;\r\nimport flxsys.File;\r\nimport StringTools;\r\n\r\nn = new CmdTargStrList(\r\n        \"names\",\r\n        \"New file name\",\r\n        \"New file names\",\r\n        (E_CmdArgSyntax.isREQ | E_CmdArgSyntax.isVALREQ)\r\n        );\r\n\r\nd = new CmdArgStr(\r\n        \"d\",\r\n        \"directory\",\r\n        \"Directory path (relative or absolute)\",\r\n        \"Destination\",\r\n        (E_CmdArgSyntax.isOPT | E_CmdArgSyntax.isVALREQ),\r\n        Shell.curDir.path\r\n        );\r\n\r\ncmdline = new FlxCmdLine(\"touch\", [n, d]);\r\n\r\nstatus = cmdline.getParseReturn(Args);\r\nif (status != FlxCmdLine.OK)\r\n{\r\n    return [status, \"\", \"\"];\r\n}\r\n\r\ndir = Shell.curDir;\r\nif (StringTools.trim(d.value).length < 1)\r\n{\r\n    dir = Shell.curDir;\r\n}\r\nelse\r\n{\r\n    dir = Shell.drive.readFolder(d.value, Shell.curDir.path);\r\n}\r\n\r\ni = 0;\r\nwhile (i < n.list.length)\r\n{\r\n    dir.addChild(new File(\"\", n.list[i]));\r\n    i++;\r\n}\r\n\r\nreturn [null, \"\", \"\"];"},{"name":"send","path":"/bin/send","read":true,"execute":true,"write":true,"content":"import hxclap.arg.CmdArgStr;\r\nimport hxclap.arg.CmdArgInt;\r\nimport hxclap.E_CmdArgSyntax;\r\nimport flxsys.FlxCmdLine;\r\nimport flxsys.Folder;\r\nimport flxsys.File;\r\nimport StringTools;\r\nimport Std;\r\nimport flixel.FlxG;\r\nimport flxsys.FlxEditor;\r\nimport flxsys.net.Msg;\r\n\r\nignoreRequired = false;\r\nif (fileInput != null || input != null)\r\n{\r\n    ignoreRequired = true;\r\n}\r\n\r\nm = new CmdArgStr(\r\n        \"m\",\r\n        \"message\",\r\n        \"String\",\r\n        \"The message to send\",\r\n        (E_CmdArgSyntax.isREQ | E_CmdArgSyntax.isVALREQ),\r\n        \"\"\r\n        );\r\n\r\ns = new CmdArgInt(\r\n        \"s\",\r\n        \"source\",\r\n        \"Address (int)\",\r\n        \"The sender's address\",\r\n        (E_CmdArgSyntax.isREQ | E_CmdArgSyntax.isVALREQ),\r\n        0\r\n        );\r\n\r\nd = new CmdArgInt(\r\n        \"d\",\r\n        \"dest\",\r\n        \"Destination (int)\",\r\n        \"The recipient's address\",\r\n        (E_CmdArgSyntax.isREQ | E_CmdArgSyntax.isVALREQ),\r\n        0\r\n        );\r\n\r\ncmdline = new FlxCmdLine(\"edit\", [m, s, d], ignoreRequired);\r\n\r\nstatus = cmdline.getParseReturn(Args);\r\nif (status != FlxCmdLine.OK)\r\n{\r\n    return [status, \"\", \"\"];\r\n}\r\n\r\nmsg = null;\r\nif (fileInput != null)\r\n{\r\n    msg = fileInput.content;\r\n}\r\nif (input != null)\r\n{\r\n    msg = Std.string(input[0]);\r\n}\r\nif (msg == null)\r\n{\r\n    msg = m.value;\r\n}\r\n\r\nBus.sendMsg(new Msg(s.value, d.value, msg));\r\n\r\nreturn [null, \"\", \"\"];"},{"name":"script","path":"/bin/script","read":true,"execute":true,"write":true,"content":"import hxclap.arg.CmdTargStr;\r\nimport hxclap.E_CmdArgSyntax;\r\nimport flxsys.FlxCmdLine;\r\nimport flxsys.Folder;\r\nimport StringTools;\r\nimport Std;\r\nimport flxsys.File;\r\nimport flxsys.ScriptRun;\r\nimport hxclap.arg.CmdArgStrList;\r\n\r\nignoreRequired = false;\r\nif (fileInput != null || input != null)\r\n{\r\n    ignoreRequired = true;\r\n}\r\n\r\ns = new CmdTargStr(\r\n        \"source\",\r\n        \"Source path (relative or absolute)\",\r\n        \"Source\",\r\n        (E_CmdArgSyntax.isREQ | E_CmdArgSyntax.isVALREQ),\r\n        Shell.curDir.path\r\n        );\r\n\r\nargs = new CmdArgStrList(\r\n        \"a\",\r\n        \"args\",\r\n        \"Argument\",\r\n        \"Arguments to pass to the commands\",\r\n        (E_CmdArgSyntax.isOPT | E_CmdArgSyntax.isVALREQ)\r\n        );\r\nargs.delimiters = \",\";\r\n\r\ncmdline = new FlxCmdLine(\"ls\", [s, args], ignoreRequired);\r\n\r\nstatus = cmdline.getParseReturn(Args);\r\nif (status != FlxCmdLine.OK)\r\n{\r\n    return [status, \"\", \"\"];\r\n}\r\n\r\nif (input != null)\r\n{\r\n    if (Std.is(input[0], File))\r\n    {\r\n        script = input[0].content;\r\n    }\r\n    else\r\n    {\r\n        script = input[0];\r\n    }\r\n}\r\n\r\nif (fileInput != null)\r\n{\r\n    script = fileInput.content;\r\n}\r\n\r\nif (fileInput == null && input == null)\r\n{\r\n    script = Shell.drive.readFile(s.value, Shell.curDir.path).content;\r\n}\r\n\r\nres = ScriptRun.parseScriptString(Shell, script, [], null, null);\r\n\r\nreturn res;"},{"name":"grep","path":"/bin/grep","read":true,"execute":true,"write":true,"content":"import hxclap.arg.CmdArgStr;\r\nimport hxclap.arg.CmdTargStrList;\r\nimport hxclap.E_CmdArgSyntax;\r\nimport flxsys.FlxCmdLine;\r\nimport StringTools;\r\nimport hxclap.arg.CmdArgStrList;\r\nimport EReg;\r\n\r\ns = new CmdTargStrList(\r\n        \"source\",\r\n        \"Path (relative or absolute)\",\r\n        \"Files to search within\",\r\n        (E_CmdArgSyntax.isREQ | E_CmdArgSyntax.isVALREQ)\r\n        );\r\n\r\nf = new CmdArgStr(\r\n        \"f\",\r\n        \"find\",\r\n        \"Regex\",\r\n        \"Search for lines matching this regex (NOT WORKING AT THE MOMENT)\",\r\n        (E_CmdArgSyntax.isOPT | E_CmdArgSyntax.isVALREQ),\r\n        \".\"\r\n        );\r\n\r\nw = new CmdArgStr(\r\n        \"w\",\r\n        \"word\",\r\n        \"String\",\r\n        \"Search for lines containing this string\",\r\n        (E_CmdArgSyntax.isOPT | E_CmdArgSyntax.isVALREQ),\r\n        \"\"\r\n        );\r\n\r\ncmdline = new FlxCmdLine(\"find\", [w, s]);\r\n\r\nstatus = cmdline.getParseReturn(Args);\r\nif (status != FlxCmdLine.OK)\r\n{\r\n    return [status, \"\", \"\"];\r\n}\r\n\r\nret = [];\r\n//ereg = new EReg(f.value, \"m\");\r\nword_search = w.value;\r\n\r\nfunction findMatches(arr, regex, file)\r\n{\r\n    if (regex.match(file.content))\r\n    {\r\n        //resstring = regex.matched(0);\r\n        \r\n        //if (resstring != null)\r\n            //arr.push(resstring);\r\n    }\r\n};\r\n\r\nfunction findMatchesWord(arr, w, file)\r\n{\r\n    res = file.content.indexOf(w);\r\n    \r\n    if (res > -1)\r\n    {\r\n        interm = file.content.substring(res, file.content.length);\r\n        arr.push(file.content.substring(res, res + interm.indexOf(\"\\n\")));\r\n    }\r\n};\r\n\r\ni = 0;\r\nwhile (i < s.list.length)\r\n{\r\n    f = Shell.drive.readFile(s.list[i], Shell.curDir.path);\r\n    findMatchesWord(ret, word_search, f);\r\n    i++;\r\n}\r\n\r\nreturn [ret, \"\", \"\"];"},{"name":"rename","path":"/bin/rename","read":true,"execute":true,"write":true,"content":"import hxclap.arg.CmdArgStrList;\r\nimport hxclap.arg.CmdTargStrList;\r\nimport hxclap.E_CmdArgSyntax;\r\nimport flxsys.FlxCmdLine;\r\n\r\ns = new CmdTargStrList(\r\n        \"source\",\r\n        \"Path (relative or absolute)\",\r\n        \"Files/Directories to be renamed\",\r\n        (E_CmdArgSyntax.isREQ | E_CmdArgSyntax.isVALREQ)\r\n        );\r\n\r\nd = new CmdArgStrList(\r\n        \"n\",\r\n        \"newnames\",\r\n        \"Name (string)\",\r\n        \"New names to be assigned\",\r\n        (E_CmdArgSyntax.isREQ | E_CmdArgSyntax.isVALREQ)\r\n        );\r\nd.delimiters = \",\";\r\n\r\ncmdline = new FlxCmdLine(\"rename\", [s, d]);\r\n\r\nstatus = cmdline.getParseReturn(Args);\r\nif (status != FlxCmdLine.OK)\r\n{\r\n    return [status, \"\", \"\"];\r\n}\r\n\r\ni = 0;\r\nwhile (i < s.list.length)\r\n{\r\n    f = Shell.drive.readItem(s.list[i], Shell.curDir.path);\r\n    f.rename(d.list[i]);\r\n    i++;\r\n}\r\n\r\nreturn [null, \"\", \"\"];"},{"name":"rmdir","path":"/bin/rmdir","read":true,"execute":true,"write":true,"content":"import hxclap.arg.CmdTargStrList;\r\nimport hxclap.E_CmdArgSyntax;\r\nimport flxsys.FlxCmdLine;\r\nimport StringTools;\r\n\r\np = new CmdTargStrList(\r\n        \"paths\",\r\n        \"Path (relative or absolute)\",\r\n        \"Paths to folders to delete\",\r\n        (E_CmdArgSyntax.isREQ | E_CmdArgSyntax.isVALREQ)\r\n        );\r\n\r\ncmdline = new FlxCmdLine(\"rmdir\", [p]);\r\n\r\nstatus = cmdline.getParseReturn(Args);\r\nif (status != FlxCmdLine.OK)\r\n{\r\n    return [status, \"\", \"\"];\r\n}\r\n\r\ni = 0;\r\nwhile (i < p.list.length)\r\n{\r\n    folder = Shell.drive.readFolder(p.list[i], Shell.curDir.path);\r\n    folder.delete();\r\n    i++;\r\n}\r\n\r\nreturn [null, \"\", \"\"];"},{"name":"shell","path":"/bin/shell","read":true,"execute":true,"write":true,"content":"import hxclap.arg.CmdTargStrList;\r\nimport hxclap.E_CmdArgSyntax;\r\nimport flxsys.FlxCmdLine;\r\nimport flxsys.Folder;\r\nimport StringTools;\r\nimport Std;\r\nimport flxsys.File;\r\nimport flxsys.ScriptRun;\r\n\r\nignoreRequired = false;\r\nif (fileInput != null || input != null)\r\n{\r\n    ignoreRequired = true;\r\n}\r\n\r\ns = new CmdTargStrList(\r\n        \"source\",\r\n        \"Source path (relative or absolute)\",\r\n        \"Source\",\r\n        (E_CmdArgSyntax.isREQ | E_CmdArgSyntax.isVALREQ)\r\n        );\r\n\r\ncmdline = new FlxCmdLine(\"ls\", [s], ignoreRequired);\r\n\r\nstatus = cmdline.getParseReturn(Args);\r\nif (status != FlxCmdLine.OK)\r\n{\r\n    return [status, \"\", \"\"];\r\n}\r\n\r\nscripts = [];\r\nif (input != null)\r\n{\r\n    if (Std.is(input[0], File))\r\n    {\r\n        scripts.push(input[0].content);\r\n    }\r\n    else\r\n    {\r\n        scripts.push(input[0]);\r\n    }\r\n}\r\n\r\nif (fileInput != null)\r\n{\r\n    scripts.push(fileInput.content);\r\n}\r\n\r\nif (fileInput == null && input == null)\r\n{\r\n\tfor (f in s.list)\r\n\t{\r\n\t\tscripts.push(Shell.drive.readFile(f, Shell.curDir.path).content);\r\n\t}\r\n}\r\n\r\nfor (script in scripts)\r\n{\r\n\tfor (line in script.split(\";\"))\r\n\t{\r\n\t\tline = StringTools.trim(line);\r\n\t\t\r\n\t\tif (line.length > 0)\r\n\t\t{\r\n\t\t\tShell.parse(line, false);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nreturn [null, \"\", \"\"];"},{"name":"echo","path":"/bin/echo","read":true,"execute":true,"write":true,"content":"usage = [\"echo usage: [filepath < echo] or [command | echo]\", \"\", \"\"];\r\n\r\nif (fileInput == null && input == null)\r\n{\r\n    return usage;\r\n}\r\n\r\nif (Args.length > 0)\r\n{\r\n    if (Args[0] == \"-h\" || Args[0] == \"-help\")\r\n    {\r\n        return usage;\r\n    }\r\n}\r\n\r\nif (fileInput != null)\r\n{\r\n    ret = fileInput.content;\r\n}\r\nelse\r\n{\r\n    ret = input[0];\r\n}\r\n\r\nreturn [ret, \"\", \"\"];"},{"name":"help","path":"/bin/help","read":true,"execute":true,"write":true,"content":"import flxsys.Folder;\r\nimport hxclap.arg.CmdArgBool;\r\nimport hxclap.E_CmdArgSyntax;\r\nimport flxsys.FlxCmdLine;\r\nimport EReg;\r\n\r\ne = new EReg(\"r\", \"opt\");\r\nreturn [e.split(\"robot Robby\"), \"\", \"\"];\r\n\r\nbin = new CmdArgBool(\r\n        \"b\",\r\n        \"bin\",\r\n        \"Outputs a list of available commands\",\r\n        (E_CmdArgSyntax.isOPT) //Flag is set to optional\r\n        );\r\n\r\ncmdline = new FlxCmdLine(\"help\", [bin]);\r\n\r\nstatus = cmdline.getParseReturn(Args);\r\nif (status != FlxCmdLine.OK)\r\n{\r\n    return [status, \"\", \"\"];\r\n}\r\n\r\nif (bin.value == true)\r\n{\r\n    arr = [];\r\n    \r\n    for (x in Shell.drive.readFolder(\"/bin\").children)\r\n    {\r\n        if (!x.isDirectory)\r\n        {\r\n            arr.push(x);\r\n        }\r\n    }\r\n    \r\n    return [arr, \"name\", \"\"];\r\n}\r\n\r\nreturn [\"Try 'help -help' to see a list of options. You can use the '-h'/'-help' arguments for any command to obtain its usage info.\", \"\", \"\"];"},{"name":"mkdir","path":"/bin/mkdir","read":true,"execute":true,"write":true,"content":"import hxclap.arg.CmdArgStrList;\r\nimport hxclap.arg.CmdTargStrList;\r\nimport hxclap.arg.CmdArgStr;\r\nimport hxclap.E_CmdArgSyntax;\r\nimport flxsys.FlxCmdLine;\r\nimport flxsys.Folder;\r\nimport StringTools;\r\n\r\nn = new CmdTargStrList(\r\n        \"names\",\r\n        \"New directory name\",\r\n        \"New directory names\",\r\n        (E_CmdArgSyntax.isREQ | E_CmdArgSyntax.isVALREQ)\r\n        );\r\n\r\nd = new CmdArgStr(\r\n        \"d\",\r\n        \"directory\",\r\n        \"Directory path (relative or absolute)\",\r\n        \"Destinations\",\r\n        (E_CmdArgSyntax.isOPT | E_CmdArgSyntax.isVALREQ),\r\n        Shell.curDir.path\r\n        );\r\n\r\ncmdline = new FlxCmdLine(\"mkdir\", [n, d]);\r\n\r\nstatus = cmdline.getParseReturn(Args);\r\nif (status != FlxCmdLine.OK)\r\n{\r\n    return [status, \"\", \"\"];\r\n}\r\n\r\ndir = Shell.curDir;\r\nif (StringTools.trim(d.value).length < 1)\r\n{\r\n    dir = Shell.curDir;\r\n}\r\nelse\r\n{\r\n    dir = Shell.drive.readFolder(d.value, Shell.curDir.path);\r\n}\r\n\r\ni = 0;\r\nwhile (i < n.list.length)\r\n{\r\n    dir.addChild(new Folder([], n.list[i]));\r\n    i++;\r\n}\r\n\r\nreturn [null, \"\", \"\"];"},{"name":"clip","path":"/bin/clip","read":true,"execute":true,"write":true,"content":"import flash.system.System;\r\nimport flxsys.File;\r\nimport Std;\r\n\r\nusage = [\"clip usage: [filepath < clip] or [command | clip] or [clip filename]\", \"\", \"\"];\r\n\r\nif (Args.length > 0)\r\n{\r\n    if (Args[0] == \"-h\" || Args[0] == \"-help\")\r\n    {\r\n        return usage;\r\n    }\r\n}\r\n\r\nif (fileInput == null && input == null)\r\n{\r\n    if (Args.length == 0)\r\n        return usage;\r\n    \r\n    f = Shell.drive.readFile(Args[0], Shell.curDir.path);\r\n    ret = f.content;\r\n}\r\n\r\nif (fileInput != null)\r\n{\r\n    ret = fileInput.content;\r\n}\r\nif (fileInput == null && input != null)\r\n{\r\n    if (Std.is(input[0], File))\r\n    {\r\n        ret = input[0].content;\r\n    }\r\n    else\r\n    {\r\n        ret = input[0];\r\n    }\r\n}\r\n\r\nSystem.setClipboard(ret);\r\n\r\nreturn [null, \"\", \"\"];"},{"name":"edit","path":"/bin/edit","read":true,"execute":true,"write":true,"content":"import hxclap.arg.CmdTargStr;\r\nimport hxclap.E_CmdArgSyntax;\r\nimport flxsys.FlxCmdLine;\r\nimport flxsys.Folder;\r\nimport flxsys.File;\r\nimport StringTools;\r\nimport flixel.FlxG;\r\nimport flxsys.FlxEditor;\r\n\r\nignoreRequired = false;\r\nif (fileInput != null || input != null)\r\n{\r\n    ignoreRequired = true;\r\n}\r\n\r\ns = new CmdTargStr(\r\n        \"source\",\r\n        \"File path (relative or absolute)\",\r\n        \"Source file to read\",\r\n        (E_CmdArgSyntax.isREQ | E_CmdArgSyntax.isVALREQ),\r\n        \"\"\r\n        );\r\n\r\ncmdline = new FlxCmdLine(\"edit\", [s], ignoreRequired);\r\ncmdline.addHelp = \"Ctrl-s to save, and Ctrl-d to quit.\";\r\n\r\nstatus = cmdline.getParseReturn(Args);\r\nif (status != FlxCmdLine.OK)\r\n{\r\n    return [status, \"\", \"\"];\r\n}\r\n\r\nif (input != null)\r\n{\r\n    if (Std.is(input[0], File))\r\n    {\r\n        f = input[0].content;\r\n    }\r\n    else\r\n    {\r\n        f = Shell.drive.readFile(input[0], Shell.curDir.path);\r\n    }\r\n}\r\n\r\nif (fileInput != null)\r\n{\r\n    f = fileInput;\r\n}\r\n\r\nif (fileInput == null && input == null)\r\n{\r\n    f = Shell.curDir;\r\n    if (StringTools.trim(s.value).length < 1)\r\n    {\r\n        f = Shell.curDir;\r\n    }\r\n    else\r\n    {\r\n        f = Shell.drive.readFile(s.value, Shell.curDir.path);\r\n    }\r\n}\r\n\r\nShell.openEditor(f);\r\n\r\nreturn [null, \"\", \"\"];"},{"name":"cp","path":"/bin/cp","read":true,"execute":true,"write":true,"content":"import hxclap.arg.CmdArgStrList;\r\nimport hxclap.arg.CmdTargStrList;\r\nimport hxclap.E_CmdArgSyntax;\r\nimport flxsys.FlxCmdLine;\r\n\r\ns = new CmdTargStrList(\r\n        \"source\",\r\n        \"File path (relative or absolute)\",\r\n        \"Files to be copied\",\r\n        (E_CmdArgSyntax.isREQ | E_CmdArgSyntax.isVALREQ)\r\n        );\r\n\r\nd = new CmdArgStrList(\r\n        \"d\",\r\n        \"destination\",\r\n        \"File path (relative or absolute)\",\r\n        \"Copy destinations\",\r\n        (E_CmdArgSyntax.isREQ | E_CmdArgSyntax.isVALREQ)\r\n        );\r\nd.delimiters = \",\";\r\n\r\ncmdline = new FlxCmdLine(\"cp\", [s, d]);\r\n\r\nstatus = cmdline.getParseReturn(Args);\r\nif (status != FlxCmdLine.OK)\r\n{\r\n    return [status, \"\", \"\"];\r\n}\r\n\r\ni = 0;\r\nwhile (i < s.list.length)\r\n{\r\n    f = Shell.drive.readItem(s.list[i], Shell.curDir.path);\r\n    f.copy(d.list[i], Shell);\r\n    i++;\r\n}\r\n\r\nreturn [null, \"\", \"\"];"},{"name":"find","path":"/bin/find","read":true,"execute":true,"write":true,"content":"import hxclap.arg.CmdTargStr;\r\nimport hxclap.arg.CmdArgStr;\r\nimport hxclap.E_CmdArgSyntax;\r\nimport flxsys.FlxCmdLine;\r\nimport StringTools;\r\n\r\nd = new CmdArgStr(\r\n        \"d\",\r\n        \"directory\",\r\n        \"Path (relative or absolute)\",\r\n        \"Directory from which to start the search\",\r\n        (E_CmdArgSyntax.isOPT | E_CmdArgSyntax.isVALREQ),\r\n        Shell.curDir.path\r\n        );\r\n\r\nn = new CmdTargStr(\r\n        \"name\",\r\n        \"Name of file/folder\",\r\n        \"Searches for file/folder\",\r\n        (E_CmdArgSyntax.isOPT | E_CmdArgSyntax.isVALREQ),\r\n        Shell.curDir.path\r\n        );\r\n\r\ncmdline = new FlxCmdLine(\"find\", [d, n]);\r\n\r\nstatus = cmdline.getParseReturn(Args);\r\nif (status != FlxCmdLine.OK)\r\n{\r\n    return [status, \"\", \"\"];\r\n}\r\n\r\ndir = Shell.curDir;\r\nif (StringTools.trim(d.value).length < 1)\r\n{\r\n    dir = Shell.curDir;\r\n}\r\nelse\r\n{\r\n    dir = Shell.drive.readFolder(d.value, Shell.curDir.path);\r\n}\r\n\r\nfunction searchItem(arr, item, name)\r\n{\r\n    if (item.isDirectory)\r\n    {\r\n        searchFolder(arr, item, name);\r\n    }\r\n    else\r\n    {\r\n        searchFile(arr, item, name);\r\n    }\r\n};\r\n\r\nfunction searchFile(arr, item, name)\r\n{\r\n    if (item.name.indexOf(name) > -1)\r\n    {\r\n        arr.push(item);\r\n    }\r\n};\r\n\r\nfunction searchFolder(arr, item, name)\r\n{\r\n    if (item.name.indexOf(name) > -1)\r\n    {\r\n        arr.push(item);\r\n    }\r\n    \r\n    for (c in item.children)\r\n    {\r\n        searchItem(arr, c, name);\r\n    }\r\n};\r\n\r\nresults = [];\r\nsearchFolder(results, dir, n.value);\r\n\r\nreturn [results, \"name\", \"isDirectory\"];\r\n"},{"name":"pwd","path":"/bin/pwd","read":true,"execute":true,"write":true,"content":"usage = [\"pwd usage: pwd returns the shell's current working directory which can be modified by the cd command\", \"\", \"\"];\r\n\r\nif (Args.length > 0)\r\n{\r\n    return usage;\r\n}\r\n\r\nreturn [Shell.curDir.path, \"\", \"\"];"},{"name":"rm","path":"/bin/rm","read":true,"execute":true,"write":true,"content":"import hxclap.arg.CmdTargStrList;\r\nimport hxclap.E_CmdArgSyntax;\r\nimport flxsys.FlxCmdLine;\r\nimport flxsys.File;\r\nimport StringTools;\r\n\r\np = new CmdTargStrList(\r\n        \"paths\",\r\n        \"Path (relative or absolute)\",\r\n        \"Paths to files to delete\",\r\n        (E_CmdArgSyntax.isREQ | E_CmdArgSyntax.isVALREQ)\r\n        );\r\n\r\ncmdline = new FlxCmdLine(\"rm\", [p]);\r\n\r\nstatus = cmdline.getParseReturn(Args);\r\nif (status != FlxCmdLine.OK)\r\n{\r\n    return [status, \"\", \"\"];\r\n}\r\n\r\ni = 0;\r\nwhile (i < p.list.length)\r\n{\r\n    file = Shell.drive.readFile(p.list[i], Shell.curDir.path);\r\n    file.delete();\r\n    i++;\r\n}\r\n\r\nreturn [null, \"\", \"\"];"},{"name":"backup","path":"/bin/backup","read":true,"execute":true,"write":true,"content":"import hxclap.arg.CmdArgBool;\r\nimport hxclap.E_CmdArgSyntax;\r\nimport flxsys.FlxCmdLine;\r\n\r\nl = new CmdArgBool(\r\n        \"l\",\r\n        \"load\",\r\n        \"load a backup file\",\r\n        (E_CmdArgSyntax.isOPT)\r\n        );\r\n\r\ns = new CmdArgBool(\r\n        \"s\",\r\n        \"save\",\r\n        \"export/save a backup file\",\r\n        (E_CmdArgSyntax.isOPT)\r\n        );\r\n\r\ncmdline = new FlxCmdLine(\"backup\", [s, l]);\r\n\r\nstatus = cmdline.getParseReturn(Args);\r\nif (status != FlxCmdLine.OK)\r\n{\r\n    return [status, \"\", \"\"];\r\n}\r\n\r\nif (l.value == true)\r\n{\r\n    Shell.importBackup();\r\n}\r\n\r\nif (s.value == true)\r\n{\r\n    Shell.exportBackup();\r\n}\r\n\r\nif (l.value == false && s.value == false)\r\n{\r\n    return [cmdline.getUsageString(), \"\", \"\"];\r\n}\r\n\r\nreturn [null, \"\", \"\"];"}]},{"name":"mnt","path":"/mnt","read":true,"execute":true,"write":true,"children":[]},{"name":"boot","path":"/boot","read":true,"execute":true,"write":true,"children":[{"name":"init","path":"/boot/init","read":true,"execute":true,"write":true,"content":"'Welcome.' < echo;\r\n'' < echo;"}]},{"name":"home","path":"/home","read":true,"execute":true,"write":true,"children":[]}]}